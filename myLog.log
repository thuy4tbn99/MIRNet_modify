MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
MIRNet(
  (conv_in): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (body): Sequential(
    (0): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): RRG(
      (body): Sequential(
        (0): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (1): MSRB(
          (blocks): ModuleList(
            (0): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (2): ModuleList(
              (0): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (1): DAU(
                (body): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (1): PReLU(num_parameters=1)
                  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                )
                (SA): spatial_attn_layer(
                  (compress): ChannelPool()
                  (spatial): BasicConv(
                    (conv): Conv2d(2, 1, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
                  )
                )
                (CA): ca_layer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): ReLU(inplace=True)
                    (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (3): Sigmoid()
                  )
                )
                (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
          )
          (last_up): ModuleDict(
            (1): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (down): ModuleDict(
            (32_4): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (32_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): DownSample(
              (body): Sequential(
                (0): ResidualDownSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (5): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Downsample(
                      (pad): ReflectionPad2d((1, 1, 1, 1))
                    )
                    (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (up): ModuleDict(
            (128_4): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
                (1): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (128_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
            (64_2): UpSample(
              (body): Sequential(
                (0): ResidualUpSample(
                  (top): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): PReLU(num_parameters=1)
                    (2): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1), bias=False)
                    (3): PReLU(num_parameters=1)
                    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                  (bot): Sequential(
                    (0): Upsample(scale_factor=2.0, mode=bilinear)
                    (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  )
                )
              )
            )
          )
          (conv_out): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (selective_kernel): ModuleList(
            (0): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (1): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
            (2): SKFF(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): PReLU(num_parameters=1)
              )
              (fcs): ModuleList(
                (0): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (2): Conv2d(16, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
              (softmax): Softmax(dim=1)
            )
          )
        )
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (conv_out): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
